#pragma once

#include <algorithm>
#include <cstdint>
#include <vector>
#include <iomanip>

#include <fmt/format.h>
#include <kitty/constructors.hpp>
#include <kitty/dynamic_truth_table.hpp>
#include <kitty/npn.hpp>
#include <kitty/print.hpp>
#include <kitty/static_truth_table.hpp>

#include "../../algorithms/simulation.hpp"
#include "../../io/write_bench.hpp"
#include "../../networks/xmg.hpp"
#include "../../utils/node_map.hpp"
#include "../../utils/stopwatch.hpp"
#include "../../views/topo_view.hpp"

namespace mockturtle
{

struct xmg_npn_minmc_resynthesis_params
{
  /*! \brief Be verbose. */
  bool verbose{ false };
};

struct xmg_npn_minmc_resynthesis_stats
{
  stopwatch<>::duration time_classes{ 0 };
  stopwatch<>::duration time_db{ 0 };

  uint32_t db_size;
  uint32_t covered_classes;

  void report() const
  {
    std::cout << fmt::format( "[i] build classes time = {:>5.2f} secs\n", to_seconds( time_classes ) );
    std::cout << fmt::format( "[i] build db time      = {:>5.2f} secs\n", to_seconds( time_db ) );
  }
};

/*! \brief Resynthesis function based on pre-computed XMGs.
 *
 * This resynthesis function can be passed to ``cut_rewriting``.  It will
 * produce a network based on pre-computed XMG with up to at most 4 variables.
 * Consequently, the nodes' fan-in sizes in the input network must not exceed
 * 4.
 *
   \verbatim embed:rst

   Example

   .. code-block:: c++

      const xmg_network xmg = ...;
      xmg_npn_minmc_resynthesis<xmg_network> xmg_resyn;
      xmg = cut_rewriting( xmg, xmg_resyn );

   .. note::

      The implementation of this algorithm was heavily inspired by the rewrite
      command in AIG.  It uses the same underlying database of subcircuits.
   \endverbatim
 */
template<class Ntk, class DatabaseNtk = xmg_network>
class xmg_npn_minmc_resynthesis
{
public:
  xmg_npn_minmc_resynthesis( xmg_npn_minmc_resynthesis_params const& ps = {}, xmg_npn_minmc_resynthesis_stats* pst = nullptr )
      : ps( ps ),
        pst( pst ),
        _repr( 1u << 16u )
  {
    static_assert( is_network_type_v<Ntk>, "Ntk is not a network type" );
    static_assert( has_get_constant_v<Ntk>, "Ntk does not implement the get_constant method" );
    static_assert( has_create_and_v<Ntk>, "Ntk does not implement the create_and method" );
    static_assert( has_create_xor_v<Ntk>, "Ntk does not implement the create_xor method" );
    static_assert( has_create_not_v<Ntk>, "Ntk does not implement the create_not method" );

    static_assert( is_network_type_v<DatabaseNtk>, "DatabaseNtk is not a network type" );
    static_assert( has_get_node_v<DatabaseNtk>, "DatabaseNtk does not implement the get_node method" );
    static_assert( has_is_complemented_v<DatabaseNtk>, "DatabaseNtk does not implement the is_complemented method" );
    static_assert( has_is_xor_v<DatabaseNtk>, "DatabaseNtk does not implement the is_xor method" );
    static_assert( has_size_v<DatabaseNtk>, "DatabaseNtk does not implement the size method" );
    static_assert( has_create_pi_v<DatabaseNtk>, "DatabaseNtk does not implement the create_pi method" );
    static_assert( has_create_and_v<DatabaseNtk>, "DatabaseNtk does not implement the create_and method" );
    static_assert( has_create_xor_v<DatabaseNtk>, "DatabaseNtk does not implement the create_xor method" );
    static_assert( has_foreach_fanin_v<DatabaseNtk>, "DatabaseNtk does not implement the foreach_fanin method" );
    static_assert( has_foreach_node_v<DatabaseNtk>, "DatabaseNtk does not implement the foreach_node method" );
    static_assert( has_make_signal_v<DatabaseNtk>, "DatabaseNtk does not implement the make_signal method" );

    build_classes();
    build_db();
  }

  virtual ~xmg_npn_minmc_resynthesis()
  {
    if ( ps.verbose )
    {
      st.report();
    }

    if ( pst )
    {
      *pst = st;
    }
  }

  template<typename LeavesIterator, typename Fn>
  void operator()( Ntk& ntk, kitty::dynamic_truth_table const& function, LeavesIterator begin, LeavesIterator end, Fn&& fn ) const
  {
    kitty::static_truth_table<4u> tt = kitty::extend_to<4u>( function );

    /* get representative of function */
    const auto [repr, phase, perm] = _repr[*tt.cbegin()];

    /* check if representative has circuits */
    const auto it = _repr_to_signal.find( repr );
    assert( it != _repr_to_signal.end() );
    if ( it == _repr_to_signal.end() )
    {
      return;
    }

    std::vector<signal<Ntk>> pis( 4, ntk.get_constant( false ) );
    std::copy( begin, end, pis.begin() );

    std::unordered_map<node<DatabaseNtk>, signal<Ntk>> db_to_ntk;
    db_to_ntk.insert( { 0, ntk.get_constant( false ) } );
    for ( auto i = 0; i < 4; ++i )
    {
      db_to_ntk.insert( { i + 1, ( phase >> perm[i] & 1 ) ? ntk.create_not( pis[perm[i]] ) : pis[perm[i]] } );
      assert( !( phase >> perm[i] & 1 ) );
    }

    for ( auto const& cand : it->second )
    {
      const auto f = copy_db_entry( ntk, _db.get_node( cand ), db_to_ntk );
      if ( fn( _db.is_complemented( cand ) != ( phase >> 4 & 1 ) ? ntk.create_not( f ) : f ) )
      {
        return;
      }
    }
  }

private:
  signal<Ntk>
  copy_db_entry( Ntk& ntk, node<DatabaseNtk> const& n, std::unordered_map<node<DatabaseNtk>, signal<Ntk>>& db_to_ntk ) const
  {
    if ( const auto it = db_to_ntk.find( n ); it != db_to_ntk.end() )
    {
      return it->second;
    }

    std::array<signal<Ntk>, 3> fanin{};
    _db.foreach_fanin( n, [&]( auto const& f, auto i ) {
      const auto ntk_f = copy_db_entry( ntk, _db.get_node( f ), db_to_ntk );
      fanin[i] = _db.is_complemented( f ) ? ntk.create_not( ntk_f ) : ntk_f;
    } );

    const auto f = _db.is_xor3( n ) ? ntk.create_xor3( fanin[0], fanin[1], fanin[2] ) : ntk.create_maj( fanin[0], fanin[1], fanin[2] );
    db_to_ntk.insert( { n, f } );
    return f;
  }

  void build_classes()
  {
    stopwatch t( st.time_classes );

    kitty::static_truth_table<4u> tt;
    do
    {
      _repr[*tt.cbegin()] = kitty::exact_npn_canonization( tt );
      kitty::next_inplace( tt );
    } while ( !kitty::is_const0( tt ) );
  }

  void build_db()
  {
    stopwatch t( st.time_db );

    _db.get_constant( false );
    /* four primary inputs */
    _db.create_pi();
    _db.create_pi();
    _db.create_pi();
    _db.create_pi();

    auto* p = subgraphs;
    while ( true )
    {
      auto entry0 = *p++;
      auto entry1 = *p++;
      auto entry2 = *p++;

      if ( entry0 == 0 && entry1 == 0 && entry2 == 0 )
      {
        break;
      }

      auto is_xor = entry0 & 1;
      entry0 >>= 1;

      const auto child0 = _db.make_signal( entry0 >> 1 ) ^ ( entry0 & 1 );
      const auto child1 = _db.make_signal( entry1 >> 1 ) ^ ( entry1 & 1 );
      const auto child2 = _db.make_signal( entry2 >> 1 ) ^ ( entry2 & 1 );

      if ( is_xor )
      {
        _db.create_xor3( child0, child1, child2 );
      }
      else
      {
        _db.create_maj( child0, child1, child2 );
      }
    }

    const auto sim_res = simulate_nodes<kitty::static_truth_table<4u>>( _db );

    _db.foreach_node( [&]( auto n ) {
      if ( std::get<0>( _repr[*sim_res[n].cbegin()] ) == sim_res[n] )
      {
        if ( _repr_to_signal.count( sim_res[n] ) == 0 )
        {
          _repr_to_signal.insert( { sim_res[n], { _db.make_signal( n ) } } );
        }
        else
        {
          _repr_to_signal[sim_res[n]].push_back( _db.make_signal( n ) );
        }
      }
      else
      {
        const auto f = ~sim_res[n];
        if ( std::get<0>( _repr[*f.cbegin()] ) == f )
        {
          if ( _repr_to_signal.count( f ) == 0 )
          {
            _repr_to_signal.insert( { f, { !_db.make_signal( n ) } } );
          }
          else
          {
            _repr_to_signal[f].push_back( !_db.make_signal( n ) );
          }
        }
      }
    } );

    st.db_size = _db.size();
    st.covered_classes = static_cast<uint32_t>( _repr_to_signal.size() );
  }

  xmg_npn_minmc_resynthesis_params ps;
  xmg_npn_minmc_resynthesis_stats st;
  xmg_npn_minmc_resynthesis_stats* pst{ nullptr };

  std::vector<std::tuple<kitty::static_truth_table<4u>, uint32_t, std::vector<uint8_t>>> _repr;
  std::unordered_map<kitty::static_truth_table<4u>, std::vector<signal<DatabaseNtk>>, kitty::hash<kitty::static_truth_table<4u>>> _repr_to_signal;

  DatabaseNtk _db;

  // clang-format off
  inline static const uint16_t subgraphs[]
  {
    0x4,0x6,0x9,0x8,0x9,0xa,0x2,0x8,0xc,0x8,0x6,0x9,0x2,0x8,0x10,0x5,0x4,0x8,0x2,0x6,0x8,0x0,0x14,0x17,0x2,0x6,0x8,0x4,0x5,0x0,0x4,0x16,0x1b,0x2,0x6,0x8,0xa,0x6,0x0,0x5,0x4,0x1e,0xc,0x8,0x1f,0x0,0x20,0x23,0x4,0x4,0x6,0x2,0x8,0x26,0x4,0x5,0x6,0x5,0x8,0x2a,0x0,0x9,0x2c,0x8,0x7,0x0,0x8,0x8,0x31,0x5,0x30,0x0,0x2,0x32,0x34,0x5,0x6,0x0,0x8,0x6,0x39,0x10,0x1,0x3a,0x4,0x4,0x1,0x1,0x6,0x3e,0x0,0x9,0x40,0x4,0x5,0x8,0xc,0x8,0x1,0x8,0x44,0x16,0x9,0x6,0x8,0x0,0x9,0x48,0x9,0x6,0x0,0x8,0x6,0x8,0x4,0x8,0x4d,0x2,0x4e,0x50,0x8,0x7,0x0,0x8,0x8,0x31,0x5,0x4,0x6,0x2,0x8,0x54,0x4,0x4,0x8,0x9,0x6,0x58,0x2,0x8,0x5a,0x6,0x58,0x5c,0x5,0x4,0x0,0xc,0x1,0x60,0x10,0x61,0x62,0x6,0x4,0x6,0x5,0x8,0x66,0x0,0x9,0x68,0x4,0x7,0x0,0x6,0x4,0x6c,0x8,0x8,0x6f,0x4,0x4,0x8,0xd,0x8,0x58,0x5,0x4,0x72,0xb2,0x0,0x74,0xa,0x6,0x8,0x4,0x4,0x78,0xd,0x8,0x78,0x2,0x7a,0x7c,0x6,0x4,0x8,0x4,0x6,0x80,0x9,0x6,0x80,0x0,0x83,0x84,0x5,0x4,0x0,0x4,0x6,0x8,0x2,0x60,0x88,0x8,0x6,0x8,0x5,0x6,0x8,0x0,0x4f,0x8c,0x4,0x6,0x8,0x4,0x0,0x89,0x8,0x88,0x91,0x9,0x6,0x8,0x6,0x0,0x48,0x4,0x6,0x8,0x4,0x94,0x89,0x4,0x4,0x1,0xc,0x8,0x3e,0x4,0x4,0x1,0x9,0x6,0x3e,0x1,0x8,0x3e,0x0,0x9b,0x9c,0x9,0x6,0x8,0x4,0x6,0x1,0x4,0x8,0x49,0x6,0xa0,0xa2,0x5,0x6,0x0,0x8,0x1,0x38,0xc,0x8,0xa6,0x9,0x6,0x8,0x4,0x5,0x48,0x0,0x9,0x48,0x6,0xaa,0x4a,0x4,0x4,0x1,0x9,0x6,0x3e,0x10,0x3e,0x9a,0x9,0x6,0x8,0x5,0x0,0x48,0x0,0x5,0xb0,0x12,0x48,0xb2,0x8,0x6,0x8,0x4,0x9,0x0,0x4,0x4e,0xb7,0xa,0x6,0x0,0x9,0x8,0x1e,0x5,0x4,0x6,0x0,0xba,0x55,0x4,0x4,0x1,0x5,0x4,0x6,0x0,0x8,0x3e,0x2,0x54,0xbe,0x8,0x6,0x8,0x5,0x8,0x4e,0x4,0x0,0x4e,0x0,0xc2,0xc5,0x8,0x6,0x1,0x5,0x4,0x6,0x10,0xc8,0x54,0x5,0x0,0x8,0xc,0x0,0xcc,0x6,0x4,0xce,0x199,0x0,0xd0,0x5,0x4,0x8,0x8,0x0,0x8,0xc,0x8,0x15,0x2,0xd4,0xd6,0x4,0x0,0x8,0x4,0x5,0x6,0x9,0x8,0x2a,0x1b6,0x0,0xdc,0x8,0x6,0x8,0x4,0x8,0x4e,0x6,0x4,0x8,0x8,0x6,0x80,0x1,0x80,0xe2,0x8,0x0,0x9,0x6,0x4,0xe6,0x4,0x6,0xe9,0x1,0xe8,0xea,0x4,0x5,0x8,0x0,0x8,0x44,0x4,0x6,0xee,0x1,0x44,0xf0,0x5,0x4,0x0,0xc,0x8,0x60,0x5,0x6,0x60,0x2,0xf4,0xf6,0x5,0x0,0x8,0x9,0x6,0xcc,0xc,0x8,0xcd,0x0,0xfa,0xfd,0x9,0x6,0x0,0x6,0x0,0x6,0x4,0x8,0x4c,0x2,0x100,0x102,0x5,0x4,0x0,0x5,0x8,0x60,0xc,0x8,0x107,0xc0,0x1,0x108,0x8,0x6,0x1,0x4,0x0,0x9,0x5,0x4,0x0,0x190,0xb7,0x60,0x4,0x4,0x8,0x1,0x8,0x58,0xc,0x8,0x10f,0x8,0x6,0x8,0x5,0x6,0x8,0x0,0x8,0x4e,0x9,0x8c,0x112,0x0,0x113,0x114,0x4,0x6,0x1,0x5,0x6,0xa0,0x9,0x0,0x118,0x10,0xa0,0x11a,0x8,0x7,0x0,0xd,0x8,0x30,0x5,0x4,0x11e,0x0,0x11e,0x120,0x5,0x4,0x0,0x2,0x6,0x60,0x8,0x1,0x62,0x10,0x60,0x124,0xa,0x6,0x0,0x8,0x8,0x1e,0x5,0x8,0x1e,0x0,0x129,0x12a,0x8,0x6,0x1,0x5,0x4,0x0,0x10,0xc8,0x60,0x6,0x4,0x8,0x5,0x6,0x80,0x1,0x4,0x80,0x12,0x130,0x132,0x5,0x4,0x8,0x4,0x4,0x1,0x0,0x6,0x14,0x10,0x3e,0x136,0x8,0x6,0x1,0x4,0x8,0xc9,0x5,0x0,0x13a,0x8,0x6,0x1,0x5,0x0,0xc8,0x10,0xc8,0x13e,0x2,0x13e,0x140,0x5,0x0,0x8,0x8,0x6,0x8,0x6,0x0,0x4e,0x0,0xcc,0x145,0x8,0x6,0x1,0x5,0x8,0x0,0x10,0xc8,0xcd,0x8,0x7,0x0,0x4,0x6,0x8,0x2,0x30,0x88,0x11,0x0,0x14a,0x9,0x6,0x8,0xe,0x0,0x48,0x5,0x6,0x0,0x10,0x14f,0x38,0x5,0x4,0x8,0x5,0x8,0x0,0xe,0x0,0x14,0x12,0xcc,0x152,0x4,0x5,0x8,0x5,0x0,0x44,0xc,0x8,0x157,0x10,0x45,0x158,0x6,0x4,0x8,0x1,0x8,0x80,0x8,0x6,0x15d,0x1,0x80,0x15e,0x8,0x7,0x0,0x5,0x6,0x30,0x4,0x4,0x31,0x10,0x162,0x164,0x4,0x4,0x1,0x4,0x8,0x3e,0xc,0x0,0x169,0x11,0x3e,0x16a,0x5,0x0,0x8,0xa,0x6,0xcc,0xc,0x8,0x16f,0x4,0x6,0x1,0x5,0x4,0x6,0x0,0x4,0x9,0x11,0xa0,0x0,0xaa,0xe6,0x172,0x4,0x4,0x9,0x5,0x4,0x6,0x1,0x6,0x176,0x10,0x54,0x178,0x8,0x6,0x8,0x4,0x1,0x4e,0x11,0x0,0x17c,0x6,0x4,0x0,0x5,0x6,0x180,0x2,0x6,0x180,0x10,0x182,0x184,0x0,0x6,0x8,0x6,0x4,0x0,0x6,0x188,0x180,0x5,0x8,0x18a,0x4,0x4,0x1,0xd,0x0,0x3e,0xc,0x8,0x40,0x4,0x5,0x0,0x8,0x7,0x1a,0xd,0x8,0x190,0x8,0x7,0x0,0xd,0x8,0x30,0xa,0x30,0x11e,0x9,0x6,0x8,0x6,0x4,0x6,0x4,0x8,0x1,0x92,0x66,0x196,0x8,0x6,0x8,0x8,0x6,0x1,0x4,0x8,0x1,0x1,0xc8,0x196,0x8,0x6,0x1,0x4,0x0,0x9,0x10,0xc8,0xb6,0x8,0x7,0x0,0x4,0x6,0x30,0xd,0x8,0x19e,0x61,0x19e,0x1a0,0x0,0x1a0,0x1a2,0x5,0x4,0x8,0x0,0x9,0x14,0x8,0x6,0x8,0x1,0x1a6,0x4e,0x8,0x6,0x8,0x5,0x6,0x4e,0x0,0x9,0x1aa,0x11,0x4e,0x1ac,0x8,0x6,0x1,0x5,0x6,0xc8,0x10,0xc8,0x1b0,0x0,0xc8,0x1b2,0x4,0x0,0x9,0x8,0x6,0x1,0xc,0xb6,0xc9,0x11,0xc8,0x1b6,0x5,0x6,0x0,0x4,0x4,0x39,0xc,0x8,0x1ba,0xa,0x6,0x8,0x4,0x4,0x78,0x0,0x9,0x7a,0xd,0x78,0x1be,0x8,0x6,0x1,0x5,0x4,0x6,0x11,0x0,0x54,0x190,0x54,0x1c2,0x4,0x0,0x9,0x8,0x7,0x8,0x9,0xb6,0x1c6,0x4,0x0,0x9,0xe,0x8,0xb6,0x8,0x9,0x1ca,0xd,0xb6,0x1cc,0x9,0x6,0x8,0x6,0x4,0x48,0x0,0x6,0x1d1,0xd,0x48,0x1d2,0x4,0x0,0x9,0xc,0x1,0xb6,0x9,0x6,0xb6,0x10,0x1d6,0x1d8,0x8,0x6,0x8,0x4,0x4,0x4f,0x2,0x8,0x1dc,0x1,0x4e,0x1de,0x6,0x6,0x0,0x9,0x0,0x100,0xc,0x8,0x1e2,0x8,0x7,0x0,0x4,0x4,0x30,0xd,0x8,0x1e6,0x60,0x1e7,0x1e8,0x1,0x4,0x8,0x4,0x6,0x1ed,0xd,0x1ec,0x0,0x10,0x1ee,0x1f1,0x4,0x0,0x9,0xa,0x6,0xb6,0x9,0x8,0x1f4,0x8,0x7,0x8,0x9,0x0,0x1c6,0x8,0x7,0x8,0x2,0x6,0x1c6,0x4,0x1,0x1fa,0x9,0x1c6,0x1fc,0x9,0x6,0x0,0x8,0x0,0x8,0x2,0x4c,0xd4,0x9,0x6,0x0,0x1,0x4,0x8,0x4,0x6,0x1,0x98,0x1ed,0xa0,0x5,0x6,0x0,0x4,0x4,0x38,0xe,0x8,0x204,0x1,0x4,0x206,0x9,0x6,0x0,0x4,0x1,0x8,0xc,0x4c,0x196,0x10,0x4c,0x20a,0x1,0x4,0x8,0xc,0x8,0x1ed,0x4,0x0,0x9,0x8,0x6,0xb7,0x11,0x0,0x210,0x8,0x7,0x8,0x4,0x1,0x8,0x9,0x1c6,0x196,0x0,0x196,0x214,0x8,0x7,0x0,0x4,0x5,0x30,0x2,0x8,0x218,0xd,0x30,0x21a,0x9,0x6,0x0,0x4,0x4,0x6,0x10,0x4c,0x26,0x5,0x4,0x0,0x0,0x9,0x60,0x8,0x6,0x221,0x11,0x0,0x222,0xa,0x6,0x8,0x1,0x6,0x78,0x10,0x0,0x227,0x5,0x4,0x0,0x44e,0x228,0x60,0x9,0x6,0x0,0x5,0x6,0x0,0x8,0x6,0x39,0x10,0x4c,0x3a,0x8,0x6,0x1,0x4,0x5,0x8,0x10,0xc8,0x45,0x11,0x0,0x22e,0x5,0x4,0x8,0x4,0x6,0x14,0x5,0x14,0x0,0x10,0x232,0x235,0x9,0x0,0x8,0x4,0x1,0x1ec,0x9,0x6,0x238,0x12,0x1ec,0x23a,0x8,0x7,0x0,0xd,0x8,0x30,0x5,0x6,0x8,0x4,0x4,0x8c,0x5,0x0,0x23e,0x6,0x6,0x8,0xd,0x8,0x0,0x4,0x242,0x245,0x9,0x0,0x242,0x2,0x246,0x248,0x4,0x6,0x0,0x8,0x9,0x24c,0x5,0x4,0x24e,0xe,0x24e,0x250,0x1,0x24e,0x252,0x5,0x6,0x8,0xa,0x0,0x8,0x6,0x8c,0x256,0x9,0x0,0x258,0x0,0x6,0x8,0x5,0x4,0x0,0x0,0x189,0x60,0x4,0x4,0x1,0x9,0x0,0x3e,0xc,0x8,0x3f,0x4,0x25f,0x260,0x5,0x6,0x0,0x9,0x8,0x38,0xc,0x1,0x264,0x10,0x264,0x266,0x5,0x6,0x0,0x9,0x8,0x38,0x8,0x0,0x264,0xc,0x8,0x264,0x2,0x26a,0x26c,0x5,0x4,0x0,0xc,0x8,0x61,0x2,0x4,0x8,0x1,0x6,0x8,0x5,0x4,0x0,0x4e6,0x244,0x60,0x6,0x6,0x8,0x8,0x6,0x243,0x9,0x242,0x0,0x10,0x276,0x248,0x0,0x6,0x9,0x4,0x4,0x6,0x5,0x4,0x0,0x4f4,0x27,0x60,0x9,0x6,0x8,0x0,0x8,0x48,0x6,0x4,0x27e,0x91,0x0,0x280,0x4,0x4,0x8,0x1,0x6,0x58,0xc,0x8,0x1,0x5,0x4,0x16,0x10,0x285,0x286,0x4,0x6,0x1,0x4,0x4,0xa1,0xc,0x8,0x28a,0x1,0xa0,0x28c,0x5,0x6,0x0,0x4,0x0,0x8,0x8,0x38,0xda,0x9,0x8,0x290,0x5,0x4,0x0,0x4,0x4,0x8,0x1,0x6,0x58,0x12,0x60,0x284,0x5,0x4,0x8,0xd,0x8,0x14,0x0,0x15,0x296,0x5,0x4,0x8,0x4,0x4,0x6,0xc,0x9,0x0,0x28,0x26,0x27b,0x5,0x4,0x8,0xd,0x8,0x14,0x8,0x6,0x1,0x28,0x297,0xc8,0x0,0x6,0x8,0x5,0x4,0x6,0x0,0x189,0x54,0x4,0x7,0x8,0x5,0x4,0x6,0x2,0x8,0x2a0,0xc,0x55,0x2a2,0x5,0x4,0x8,0xc,0x8,0x14,0x1,0x6,0x8,0xa,0x0,0x244,0x2,0x8,0x2a8,0x6,0x6,0x2aa,0xd,0x2a8,0x2ac,0x9,0x6,0x0,0x8,0x8,0x0,0x4,0x4d,0xd4,0x9,0x8,0x2b0,0x2,0x4,0x8,0x5,0x4,0x6,0x1,0x6,0x8,0x4e6,0x54,0x244,0x8,0x6,0x0,0x4,0x6,0x9,0x4,0x2b6,0xb,0x9,0x8,0x2b8,0x5,0x4,0x8,0x4,0x5,0x6,0x0,0x14,0x2b,0xd,0x8,0x2bc,0x5,0x4,0x8,0x4,0x0,0x8,0x5,0x6,0xda,0x10,0x14,0x2c0,0xe,0x2c0,0x2c2,0x0,0x6,0x8,0x5,0x4,0x6,0x4,0x5,0x0,0x312,0x54,0x1a,0x4,0x0,0x8,0x5,0x6,0x8,0x8,0xda,0x8d,0x9,0x8,0x2c8,0x0,0x4,0x9,0x0,0x6,0xe6,0x5,0x4,0x2cc,0xc,0x2cc,0x2ce,0x11,0x2ce,0x2d0,0x8,0x0,0x8,0x1,0x6,0xd4,0x4,0x4,0x2d5,0x9,0x8,0x2d6,0x5,0x4,0x8,0x0,0x7,0x14,0xd,0x8,0x152,0x0,0x153,0x2da,0x6,0x4,0x0,0x8,0x8,0x180,0x1,0x180,0x2de,0x4,0x7,0x2de,0x11,0x2e0,0x2e2,0x1,0x6,0x8,0x8,0x8,0x245,0xc,0x9,0x2e6,0x4,0x1,0x2e8,0x1,0x2e6,0x2ea,0x5,0x4,0x8,0x0,0x7,0x14,0xd,0x8,0x152,0x5,0x4,0x0,0x2,0x6,0x60,0xd,0x8,0x62,0x1,0x6,0x8,0x8,0x6,0x8,0x5,0x4,0x0,0x488,0x4f,0x60,0x0,0x6,0x9,0x4,0x4,0x0,0xc,0x27b,0x2f2,0x11,0x27a,0x2f4,0x5,0x4,0x0,0x6,0x6,0x8,0x2,0x60,0x242,0xd,0x8,0x2f8,0xa,0x6,0x8,0x4,0x0,0x79,0xd,0x8,0x2fc,0x5,0x4,0x0,0x9,0x6,0x8,0x4,0x60,0x49,0x4,0x6,0x8,0x90,0x300,0x89,0x4,0x6,0x8,0x9,0x0,0x8,0xc,0x89,0x1ec,0x9,0x88,0x304,0x1,0x6,0x8,0x6,0x4,0x8,0x4,0x1,0x6,0x48a,0x80,0xa0,0x6,0x4,0x0,0x8,0x7,0x180,0x0,0x8,0x30b,0xd,0x180,0x30c,0x1,0x6,0x8,0x8,0x6,0x8,0x5,0x0,0x6,0x48a,0x4e,0x38,0x5,0x4,0x8,0xa,0x6,0x8,0x0,0x14,0x79,0xd,0x8,0x312,0x5,0x4,0x8,0xc,0x8,0x15,0x0,0x4,0xd7,0xd,0x8,0x316,0x4,0x5,0x8,0x8,0x6,0x44,0x1,0x8,0x31a,0x4,0x4,0x9,0x0,0x9,0x176,0xe,0x176,0x31e,0xd,0x0,0x320,0x4,0x4,0x9,0x8,0x0,0x176,0xe,0x8,0x324,0x2ed,0x0,0x326,0x1,0x6,0x8,0x4,0x0,0x244,0x8,0x8,0x32b,0x489,0x32a,0x32c,0x4,0x4,0x0,0x5,0x4,0x6,0x10,0x2f3,0x54,0xd,0x0,0x330,0x5,0x6,0x0,0xe,0x8,0x38,0x6,0x4,0x334,0x11,0x38,0x336,0xa,0x6,0x8,0x6,0x8,0x78,0x10,0x0,0x33a,0x1,0x6,0x33c,0x4,0x5,0x8,0xd,0x8,0x0,0x8,0x44,0x245,0x4,0x7,0x0,0xd,0x8,0x6c,0x9,0x0,0x6c,0xa,0x342,0x344,0x8,0x6,0x1,0x4,0x6,0xc8,0x1,0x8,0x348,0x1,0x6,0x8,0x9,0x6,0x8,0x4,0x4,0x7,0xc,0x49,0x34c,0x5,0x0,0x34e,0x6,0x6,0x8,0x8,0x0,0x242,0x5,0x4,0x0,0x2,0x352,0x60,0xd,0x8,0x354,0x1,0x6,0x8,0x4,0x4,0x244,0xc,0x8,0x358,0x5,0x0,0x35a,0xa,0x358,0x35c,0x9,0x6,0x0,0x8,0x6,0x9,0x5,0x4c,0x10,0x10,0x10,0x361,0x4,0x4,0x0,0xc,0x8,0x2f2,0x9,0x2f2,0x364,0x5,0x0,0x366,0x9,0x6,0x0,0x4,0x8,0x4d,0x6,0x4,0x50,0x98,0x1,0x36a,0x1,0x50,0x36c,0x5,0x4,0x8,0xa,0x0,0x8,0x5,0x6,0x256,0x6,0x0,0x256,0x28,0x370,0x373,0x8,0x6,0x0,0x6,0x8,0x2b6,0x9,0x6,0x376,0x6,0x4,0x8,0x5,0x0,0x80,0x5,0x4,0x6,0x0,0x37a,0x54,0x6,0x4,0x8,0x4,0x7,0x0,0x0,0x80,0x6d,0x9,0x6,0x37e,0x4,0x4,0x9,0x0,0x6,0x177,0x5,0x4,0x0,0x11,0x382,0x60,0x4,0x4,0x8,0x6,0x0,0x58,0x8,0x6,0x387,0x11,0x58,0x388,0x4,0x5,0x8,0x4,0x1,0x44,0x5,0x6,0x0,0x8,0x38c,0x39,0x89,0x0,0x38e,0x4,0x0,0x9,0x6,0x6,0xb6,0x5,0x4,0x6,0xe,0x392,0x54,0x4,0x4,0x9,0x5,0x4,0x6,0x10,0x176,0x55,0x4,0x4,0x9,0x1,0x6,0x176,0xc,0x9,0x178,0x5,0x4,0x398,0x6,0x4,0x0,0xa,0x6,0x180,0x0,0x8,0x39d,0x5,0x4,0x39e,0x8,0x0,0x8,0x6,0x0,0xd4,0xa,0x6,0x3a2,0x5,0xd4,0x3a4,0x5,0x4,0x8,0x4,0x0,0x14,0xc,0x8,0x3a8,0x29,0x3a8,0x3aa,0x5,0x0,0x8,0xc,0x8,0xcc,0x5,0x4,0x6,0x198,0x3af,0x54,0x9,0x6,0x8,0x0,0x4,0x6,0x4,0x0,0x2b6,0x5,0x48,0x3b2,0x56c,0x3b3,0x3b4,0x8,0x6,0x1,0x4,0x5,0xc8,0x1,0x6,0x3b8,0xc,0x9,0x3ba,0x5,0xc8,0x3bc,0x5,0x0,0x8,0xe,0x8,0xcc,0x8,0x0,0x3c0,0xd,0xcc,0x3c2,0x8,0x6,0x0,0x5,0x8,0x2b6,0x4,0x0,0x3c7,0x9,0x6,0x3c8,0x8,0x7,0x0,0x6,0x4,0x30,0x5,0x6,0x8,0x1,0x3cc,0x8c,0x0,0x7,0x8,0x1,0x6,0x8,0x4,0x4,0x245,0xd,0x3d0,0x3d2,0x5,0x0,0x8,0x5,0x4,0x6,0xe,0xcc,0x54,0x5,0x0,0x8,0x5,0x4,0x6,0xe,0xcc,0x54,0x6,0x54,0x3d6,0x2,0x6,0x8,0x4,0x4,0x7,0x1,0x4,0x16,0x10,0x17,0x34c,0x5,0x3da,0x3dc,0x6,0x0,0x8,0x1,0x6,0x8,0x8,0x3e0,0x244,0x5,0x6,0x3e2,0x2,0x4,0x8,0xd,0x8,0x272,0x4,0x4,0x3e6,0x1,0x8,0x3e8,0x4,0x4,0x6,0x1,0x8,0x26,0x4,0x4,0x6,0xd,0x8,0x26,0x2,0x6,0x8,0x4,0x6,0x17,0x8,0x0,0x3f1,0x1,0x16,0x3f2,0x5,0x8,0x3f4,0x9,0x6,0x0,0x8,0x8,0x4d,0x6,0x6,0x3f8,0x9,0x8,0x3fa,0x4,0x6,0x0,0x8,0x0,0x24d,0x5,0x8,0x3fe,0x9,0x6,0x8,0x6,0x8,0x48,0x1,0x4,0x402,0x5,0x4,0x0,0x8,0x6,0x60,0x1,0x8,0x406,0x4,0x4,0x1,0xd,0x8,0x3e,0x9,0x6,0x8,0x1,0x6,0x8,0x5,0x4,0x244,0x0,0x0,0x0
  };// clang-format on
}; // namespace mockturtle

} /* namespace mockturtle */